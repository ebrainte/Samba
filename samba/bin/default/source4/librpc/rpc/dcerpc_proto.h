#ifndef __DEFAULT_SOURCE4_LIBRPC_RPC_DCERPC_PROTO_H__
#define __DEFAULT_SOURCE4_LIBRPC_RPC_DCERPC_PROTO_H__

#undef _PRINTF_ATTRIBUTE
#define _PRINTF_ATTRIBUTE(a1, a2) PRINTF_ATTRIBUTE(a1, a2)
/* This file was automatically generated by mkproto.pl. DO NOT EDIT */

/* this file contains prototypes for functions that are private 
 * to this subsystem or library. These functions should not be 
 * used outside this particular subsystem! */


/* The following definitions come from ../source4/librpc/rpc/dcerpc.c  */

struct dcerpc_binding_handle *dcerpc_pipe_binding_handle(struct dcerpc_pipe *p);

/**
  setup for a ndr pull, also setting up any flags from the binding string
*/
struct tevent_req *dcerpc_bind_send(TALLOC_CTX *mem_ctx,
				    struct tevent_context *ev,
				    struct dcerpc_pipe *p,
				    const struct ndr_syntax_id *syntax,
				    const struct ndr_syntax_id *transfer_syntax);
NTSTATUS dcerpc_bind_recv(struct tevent_req *req);
NTSTATUS dcerpc_auth3(struct dcerpc_pipe *p,
		      TALLOC_CTX *mem_ctx);
uint32_t dcerpc_auth_level(struct dcecli_connection *c) ;
struct tevent_req *dcerpc_alter_context_send(TALLOC_CTX *mem_ctx,
					     struct tevent_context *ev,
					     struct dcerpc_pipe *p,
					     const struct ndr_syntax_id *syntax,
					     const struct ndr_syntax_id *transfer_syntax);
NTSTATUS dcerpc_alter_context_recv(struct tevent_req *req);

/* The following definitions come from ../source4/librpc/rpc/dcerpc_auth.c  */

struct composite_context *dcerpc_bind_auth_none_send(TALLOC_CTX *mem_ctx,
						     struct dcerpc_pipe *p,
						     const struct ndr_interface_table *table);
NTSTATUS dcerpc_bind_auth_none_recv(struct composite_context *ctx);

/**
   Bind to a DCE/RPC pipe, send async request
   @param mem_ctx TALLOC_CTX for the allocation of the composite_context
   @param p The dcerpc_pipe to bind (must already be connected)
   @param table The interface table to use (the DCE/RPC bind both selects and interface and authenticates)
   @param credentials The credentials of the account to connect with 
   @param auth_type Select the authentication scheme to use
   @param auth_level Chooses between unprotected (connect), signed or sealed
   @param service The service (used by Kerberos to select the service principal to contact)
   @retval A composite context describing the partial state of the bind
*/
struct composite_context *dcerpc_bind_auth_send(TALLOC_CTX *mem_ctx,
						struct dcerpc_pipe *p,
						const struct ndr_interface_table *table,
						struct cli_credentials *credentials,
						struct gensec_settings *gensec_settings,
						uint8_t auth_type, uint8_t auth_level,
						const char *service);

/**
   Bind to a DCE/RPC pipe, receive result
   @param creq A composite context describing state of async call
   @retval NTSTATUS code
*/
NTSTATUS dcerpc_bind_auth_recv(struct composite_context *creq);

/* The following definitions come from ../source4/librpc/rpc/dcerpc_schannel.c  */

struct composite_context *dcerpc_schannel_key_send(TALLOC_CTX *mem_ctx,
						   struct dcerpc_pipe *p,
						   struct cli_credentials *credentials,
						   struct loadparm_context *lp_ctx);
NTSTATUS dcerpc_schannel_key_recv(struct composite_context *c);
struct composite_context *dcerpc_bind_auth_schannel_send(TALLOC_CTX *tmp_ctx, 
							 struct dcerpc_pipe *p,
							 const struct ndr_interface_table *table,
							 struct cli_credentials *credentials,
							 struct loadparm_context *lp_ctx,
							 uint8_t auth_level);
NTSTATUS dcerpc_bind_auth_schannel_recv(struct composite_context *c);

/* The following definitions come from ../source4/librpc/rpc/dcerpc_util.c  */

const struct ndr_interface_call *dcerpc_iface_find_call(const struct ndr_interface_table *iface,
							const char *name);
NTSTATUS ncacn_push_auth(DATA_BLOB *blob, TALLOC_CTX *mem_ctx, 
			 struct ncacn_packet *pkt,
			 struct dcerpc_auth *auth_info);
struct composite_context *dcerpc_epm_map_binding_send(TALLOC_CTX *mem_ctx,
						      struct dcerpc_binding *binding,
						      const struct ndr_interface_table *table,
						      struct tevent_context *ev,
						      struct loadparm_context *lp_ctx);
NTSTATUS dcerpc_epm_map_binding_recv(struct composite_context *c);
struct composite_context *dcerpc_pipe_auth_send(struct dcerpc_pipe *p, 
						struct dcerpc_binding *binding,
						const struct ndr_interface_table *table,
						struct cli_credentials *credentials,
						struct loadparm_context *lp_ctx);
NTSTATUS dcerpc_pipe_auth_recv(struct composite_context *c, TALLOC_CTX *mem_ctx, 
			       struct dcerpc_pipe **p);
NTSTATUS dcerpc_generic_session_key(struct dcecli_connection *c,
				    DATA_BLOB *session_key);

/* The following definitions come from ../source4/librpc/rpc/dcerpc_smb.c  */

struct composite_context *dcerpc_pipe_open_smb_send(struct dcerpc_pipe *p, 
						    struct smbcli_tree *tree,
						    const char *pipe_name);
NTSTATUS dcerpc_pipe_open_smb_recv(struct composite_context *c);

/* The following definitions come from ../source4/librpc/rpc/dcerpc_smb2.c  */

struct composite_context *dcerpc_pipe_open_smb2_send(struct dcerpc_pipe *p, 
						     struct smb2_tree *tree,
						     const char *pipe_name);
NTSTATUS dcerpc_pipe_open_smb2_recv(struct composite_context *c);
NTSTATUS dcerpc_pipe_open_smb2(struct dcerpc_pipe *p,
			       struct smb2_tree *tree,
			       const char *pipe_name);
struct smb2_tree *dcerpc_smb2_tree(struct dcecli_connection *c);

/* The following definitions come from ../source4/librpc/rpc/dcerpc_sock.c  */

struct composite_context* dcerpc_pipe_open_tcp_send(struct dcecli_connection *conn,
						    const char *localaddr,
						    const char *server,
						    const char *target_hostname,
						    uint32_t port,
						    struct resolve_context *resolve_ctx);
NTSTATUS dcerpc_pipe_open_tcp_recv(struct composite_context *c);
struct composite_context *dcerpc_pipe_open_unix_stream_send(struct dcecli_connection *conn,
							    const char *path);
NTSTATUS dcerpc_pipe_open_unix_stream_recv(struct composite_context *c);
struct composite_context* dcerpc_pipe_open_pipe_send(struct dcecli_connection *conn,
						     const char *ncalrpc_dir,
						     const char *identifier);
NTSTATUS dcerpc_pipe_open_pipe_recv(struct composite_context *c);
NTSTATUS dcerpc_pipe_open_pipe(struct dcecli_connection *conn, const char *ncalrpc_dir, const char *identifier);
const char *dcerpc_unix_socket_path(struct dcecli_connection *p);
struct socket_address *dcerpc_socket_peer_addr(struct dcecli_connection *p, TALLOC_CTX *mem_ctx);

/* The following definitions come from ../source4/librpc/rpc/dcerpc_connect.c  */

NTSTATUS dcerpc_pipe_connect_recv(struct composite_context *c,
				  TALLOC_CTX *mem_ctx,
				  struct dcerpc_pipe **pp);

/* The following definitions come from ../source4/librpc/rpc/dcerpc_secondary.c  */

#undef _PRINTF_ATTRIBUTE
#define _PRINTF_ATTRIBUTE(a1, a2)

#endif /* __DEFAULT_SOURCE4_LIBRPC_RPC_DCERPC_PROTO_H__ */

