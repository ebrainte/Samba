#ifndef __DEFAULT_SOURCE4_SMB_SERVER_SMB_SMB_PROTO_H__
#define __DEFAULT_SOURCE4_SMB_SERVER_SMB_SMB_PROTO_H__

#undef _PRINTF_ATTRIBUTE
#define _PRINTF_ATTRIBUTE(a1, a2) PRINTF_ATTRIBUTE(a1, a2)
/* This file was automatically generated by mkproto.pl. DO NOT EDIT */

/* this file contains prototypes for functions that are private 
 * to this subsystem or library. These functions should not be 
 * used outside this particular subsystem! */


/* The following definitions come from ../source4/smb_server/smb/receive.c  */

NTSTATUS smbsrv_send_oplock_break(void *p, struct ntvfs_handle *ntvfs, uint8_t level);

/****************************************************************************
receive a SMB request header from the wire, forming a request_context
from the result
****************************************************************************/
NTSTATUS smbsrv_recv_smb_request(void *private_data, DATA_BLOB blob);

/****************************************************************************
 Do a switch on the message type and call the specific reply function for this 
message. Unlike earlier versions of Samba the reply functions are responsible
for sending the reply themselves, rather than returning a size to this function
The reply functions may also choose to delay the processing by pushing the message
onto the message queue
****************************************************************************/
void smbsrv_chain_reply(struct smbsrv_request *req);
NTSTATUS smbsrv_init_smb_connection(struct smbsrv_connection *smb_conn, struct loadparm_context *lp_ctx);

/* The following definitions come from ../source4/smb_server/smb/negprot.c  */


/****************************************************************************
 Reply to a negprot.
****************************************************************************/
void smbsrv_reply_negprot(struct smbsrv_request *req);

/* The following definitions come from ../source4/smb_server/smb/nttrans.c  */


/****************************************************************************
 Reply to an SMBnttrans request
****************************************************************************/
void smbsrv_reply_nttrans(struct smbsrv_request *req);

/****************************************************************************
 Reply to an SMBnttranss request
****************************************************************************/
void smbsrv_reply_nttranss(struct smbsrv_request *req);

/* The following definitions come from ../source4/smb_server/smb/reply.c  */


/****************************************************************************
 Reply to a tcon.
****************************************************************************/
void smbsrv_reply_tcon(struct smbsrv_request *req);

/****************************************************************************
 Reply to a tcon and X.
****************************************************************************/
void smbsrv_reply_tcon_and_X(struct smbsrv_request *req);

/****************************************************************************
 Reply to an unknown request
****************************************************************************/
void smbsrv_reply_unknown(struct smbsrv_request *req);

/****************************************************************************
 Reply to an ioctl.
****************************************************************************/
void smbsrv_reply_ioctl(struct smbsrv_request *req);

/****************************************************************************
 Reply to a chkpth.
****************************************************************************/
void smbsrv_reply_chkpth(struct smbsrv_request *req);

/****************************************************************************
 Reply to a getatr.
****************************************************************************/
void smbsrv_reply_getatr(struct smbsrv_request *req);

/****************************************************************************
 Reply to a setatr.
****************************************************************************/
void smbsrv_reply_setatr(struct smbsrv_request *req);

/****************************************************************************
 Reply to a dskattr.
****************************************************************************/
void smbsrv_reply_dskattr(struct smbsrv_request *req);

/****************************************************************************
 Reply to an open.
****************************************************************************/
void smbsrv_reply_open(struct smbsrv_request *req);

/****************************************************************************
 Reply to an open and X.
****************************************************************************/
void smbsrv_reply_open_and_X(struct smbsrv_request *req);

/****************************************************************************
 Reply to a mknew or a create.
****************************************************************************/
void smbsrv_reply_mknew(struct smbsrv_request *req);

/****************************************************************************
 Reply to a create temporary file.
****************************************************************************/
void smbsrv_reply_ctemp(struct smbsrv_request *req);

/****************************************************************************
 Reply to a unlink
****************************************************************************/
void smbsrv_reply_unlink(struct smbsrv_request *req);

/****************************************************************************
 Reply to a readbraw (core+ protocol).
 this is a strange packet because it doesn't use a standard SMB header in the reply,
 only the 4 byte NBT header
 This command must be replied to synchronously
****************************************************************************/
void smbsrv_reply_readbraw(struct smbsrv_request *req);

/****************************************************************************
 Reply to a lockread (core+ protocol).
 note that the lock is a write lock, not a read lock!
****************************************************************************/
void smbsrv_reply_lockread(struct smbsrv_request *req);

/****************************************************************************
 Reply to a read.
****************************************************************************/
void smbsrv_reply_read(struct smbsrv_request *req);

/****************************************************************************
 Reply to a read and X.
****************************************************************************/
void smbsrv_reply_read_and_X(struct smbsrv_request *req);

/****************************************************************************
 Reply to a writebraw (core+ or LANMAN1.0 protocol).
****************************************************************************/
void smbsrv_reply_writebraw(struct smbsrv_request *req);

/****************************************************************************
 Reply to a writeunlock (core+).
****************************************************************************/
void smbsrv_reply_writeunlock(struct smbsrv_request *req);

/****************************************************************************
 Reply to a write
****************************************************************************/
void smbsrv_reply_write(struct smbsrv_request *req);

/****************************************************************************
 Reply to a write and X.
****************************************************************************/
void smbsrv_reply_write_and_X(struct smbsrv_request *req);

/****************************************************************************
 Reply to a lseek.
****************************************************************************/
void smbsrv_reply_lseek(struct smbsrv_request *req);

/****************************************************************************
 Reply to a flush.
****************************************************************************/
void smbsrv_reply_flush(struct smbsrv_request *req);

/****************************************************************************
 Reply to a close 

 Note that this has to deal with closing a directory opened by NT SMB's.
****************************************************************************/
void smbsrv_reply_close(struct smbsrv_request *req);

/****************************************************************************
 Reply to a writeclose (Core+ protocol).
****************************************************************************/
void smbsrv_reply_writeclose(struct smbsrv_request *req);

/****************************************************************************
 Reply to a lock.
****************************************************************************/
void smbsrv_reply_lock(struct smbsrv_request *req);

/****************************************************************************
 Reply to a unlock.
****************************************************************************/
void smbsrv_reply_unlock(struct smbsrv_request *req);

/****************************************************************************
 Reply to a tdis.
****************************************************************************/
void smbsrv_reply_tdis(struct smbsrv_request *req);

/****************************************************************************
 Reply to a echo. This is one of the few calls that is handled directly (the
 backends don't see it at all)
****************************************************************************/
void smbsrv_reply_echo(struct smbsrv_request *req);

/****************************************************************************
 Reply to a printopen.
****************************************************************************/
void smbsrv_reply_printopen(struct smbsrv_request *req);

/****************************************************************************
 Reply to a printclose.
****************************************************************************/
void smbsrv_reply_printclose(struct smbsrv_request *req);

/****************************************************************************
 Reply to a printqueue.
****************************************************************************/
void smbsrv_reply_printqueue(struct smbsrv_request *req);

/****************************************************************************
 Reply to a printwrite.
****************************************************************************/
void smbsrv_reply_printwrite(struct smbsrv_request *req);

/****************************************************************************
 Reply to a mkdir.
****************************************************************************/
void smbsrv_reply_mkdir(struct smbsrv_request *req);

/****************************************************************************
 Reply to a rmdir.
****************************************************************************/
void smbsrv_reply_rmdir(struct smbsrv_request *req);

/****************************************************************************
 Reply to a mv.
****************************************************************************/
void smbsrv_reply_mv(struct smbsrv_request *req);

/****************************************************************************
 Reply to an NT rename.
****************************************************************************/
void smbsrv_reply_ntrename(struct smbsrv_request *req);

/****************************************************************************
 Reply to a file copy.
****************************************************************************/
void smbsrv_reply_copy(struct smbsrv_request *req);

/****************************************************************************
 Reply to a lockingX request.
****************************************************************************/
void smbsrv_reply_lockingX(struct smbsrv_request *req);

/****************************************************************************
 Reply to a SMBreadbmpx (read block multiplex) request.
****************************************************************************/
void smbsrv_reply_readbmpx(struct smbsrv_request *req);

/****************************************************************************
 Reply to a SMBsetattrE.
****************************************************************************/
void smbsrv_reply_setattrE(struct smbsrv_request *req);

/****************************************************************************
 Reply to a SMBwritebmpx (write block multiplex primary) request.
****************************************************************************/
void smbsrv_reply_writebmpx(struct smbsrv_request *req);

/****************************************************************************
 Reply to a SMBwritebs (write block multiplex secondary) request.
****************************************************************************/
void smbsrv_reply_writebs(struct smbsrv_request *req);

/****************************************************************************
 Reply to a SMBgetattrE.
****************************************************************************/
void smbsrv_reply_getattrE(struct smbsrv_request *req);
void smbsrv_reply_sesssetup_send(struct smbsrv_request *req,
				 union smb_sesssetup *io,
				 NTSTATUS status);

/****************************************************************************
reply to a session setup command
****************************************************************************/
void smbsrv_reply_sesssetup(struct smbsrv_request *req);

/****************************************************************************
 Reply to a exit. This closes all files open by a smbpid
****************************************************************************/
void smbsrv_reply_exit(struct smbsrv_request *req);

/****************************************************************************
 Reply to a SMBulogoffX.
****************************************************************************/
void smbsrv_reply_ulogoffX(struct smbsrv_request *req);

/****************************************************************************
 Reply to an SMBfindclose request
****************************************************************************/
void smbsrv_reply_findclose(struct smbsrv_request *req);

/****************************************************************************
 Reply to an SMBfindnclose request
****************************************************************************/
void smbsrv_reply_findnclose(struct smbsrv_request *req);

/****************************************************************************
 Reply to an SMBntcreateX request
****************************************************************************/
void smbsrv_reply_ntcreate_and_X(struct smbsrv_request *req);

/****************************************************************************
 Reply to an SMBntcancel request
****************************************************************************/
void smbsrv_reply_ntcancel(struct smbsrv_request *req);

/****************************************************************************
 Reply to a special message - a SMB packet with non zero NBT message type
****************************************************************************/
void smbsrv_reply_special(struct smbsrv_request *req);

/* The following definitions come from ../source4/smb_server/smb/request.c  */

void smbsrv_setup_bufinfo(struct smbsrv_request *req);

/****************************************************************************
construct a basic request packet, mostly used to construct async packets
such as change notify and oplock break requests
****************************************************************************/
struct smbsrv_request *smbsrv_init_request(struct smbsrv_connection *smb_conn);
void smbsrv_setup_reply(struct smbsrv_request *req, unsigned int wct, size_t buflen);
struct smbsrv_request *smbsrv_setup_secondary_request(struct smbsrv_request *old_req);
int req_max_data(struct smbsrv_request *req);
void req_grow_data(struct smbsrv_request *req, size_t new_size);
void smbsrv_send_reply_nosign(struct smbsrv_request *req);
void smbsrv_send_reply(struct smbsrv_request *req);
void smbsrv_setup_error(struct smbsrv_request *req, NTSTATUS status);
void smbsrv_send_error(struct smbsrv_request *req, NTSTATUS status);
size_t req_push_str(struct smbsrv_request *req, uint8_t *dest, const char *str, int dest_len, size_t flags);
size_t req_append_bytes(struct smbsrv_request *req, 
			const uint8_t *bytes, size_t byte_len);
size_t req_append_var_block(struct smbsrv_request *req, 
		const uint8_t *bytes, uint16_t byte_len);

/**
  pull a string from a request packet, returning a talloced string

  the string length is limited by the 3 things:
   - the data size in the request (end of packet)
   - the passed 'byte_len' if it is not -1
   - the end of string (null termination)

  Note that 'byte_len' is the number of bytes in the packet

  on failure zero is returned and *dest is set to NULL, otherwise the number
  of bytes consumed in the packet is returned
*/
size_t req_pull_string(struct request_bufinfo *bufinfo, const char **dest, const uint8_t *src, int byte_len, unsigned int flags);

/**
  pull a ASCII4 string buffer from a request packet, returning a talloced string
  
  an ASCII4 buffer is a null terminated string that has a prefix
  of the character 0x4. It tends to be used in older parts of the protocol.

  on failure *dest is set to the zero length string. This seems to
  match win2000 behaviour
*/
size_t req_pull_ascii4(struct request_bufinfo *bufinfo, const char **dest, const uint8_t *src, unsigned int flags);

/**
  pull a DATA_BLOB from a request packet, returning a talloced blob

  return false if any part is outside the data portion of the packet
*/
bool req_pull_blob(struct request_bufinfo *bufinfo, const uint8_t *src, int len, DATA_BLOB *blob);
bool req_data_oob(struct request_bufinfo *bufinfo, const uint8_t *ptr, uint32_t count);
struct ntvfs_handle *smbsrv_pull_fnum(struct smbsrv_request *req, const uint8_t *base, unsigned int offset);
void smbsrv_push_fnum(uint8_t *base, unsigned int offset, struct ntvfs_handle *ntvfs);
NTSTATUS smbsrv_handle_create_new(void *private_data, struct ntvfs_request *ntvfs, struct ntvfs_handle **_h);
NTSTATUS smbsrv_handle_make_valid(void *private_data, struct ntvfs_handle *h);
void smbsrv_handle_destroy(void *private_data, struct ntvfs_handle *h);
struct ntvfs_handle *smbsrv_handle_search_by_wire_key(void *private_data, struct ntvfs_request *ntvfs, const DATA_BLOB *key);
DATA_BLOB smbsrv_handle_get_wire_key(void *private_data, struct ntvfs_handle *handle, TALLOC_CTX *mem_ctx);

/* The following definitions come from ../source4/smb_server/smb/search.c  */


/****************************************************************************
 Reply to a search.
****************************************************************************/
void smbsrv_reply_search(struct smbsrv_request *req);

/****************************************************************************
 Reply to fclose (stop directory search).
****************************************************************************/
void smbsrv_reply_fclose(struct smbsrv_request *req);

/* The following definitions come from ../source4/smb_server/smb/service.c  */


/****************************************************************************
 Make a connection to a service.
 *
 * @param service 
****************************************************************************/
NTSTATUS smbsrv_tcon_backend(struct smbsrv_request *req, union smb_tcon *con);

/* The following definitions come from ../source4/smb_server/smb/sesssetup.c  */

void smbsrv_sesssetup_backend(struct smbsrv_request *req,
			      union smb_sesssetup *sess);

/* The following definitions come from ../source4/smb_server/smb/srvtime.c  */


/*******************************************************************
put a dos date into a buffer (time/date format)
This takes GMT time and puts local time for zone_offset in the buffer
********************************************************************/
void srv_push_dos_date(struct smbsrv_connection *smb_server,
		      uint8_t *buf, int offset, time_t unixdate);

/*******************************************************************
put a dos date into a buffer (date/time format)
This takes GMT time and puts local time in the buffer
********************************************************************/
void srv_push_dos_date2(struct smbsrv_connection *smb_server,
		       uint8_t *buf, int offset, time_t unixdate);

/*******************************************************************
put a dos 32 bit "unix like" date into a buffer. This routine takes
GMT and converts it to LOCAL time in zone_offset before putting it
********************************************************************/
void srv_push_dos_date3(struct smbsrv_connection *smb_server,
		       uint8_t *buf, int offset, time_t unixdate);

/*******************************************************************
convert a dos date
********************************************************************/
time_t srv_pull_dos_date(struct smbsrv_connection *smb_server, 
			 const uint8_t *date_ptr);

/*******************************************************************
like srv_pull_dos_date() but the words are reversed
********************************************************************/
time_t srv_pull_dos_date2(struct smbsrv_connection *smb_server, 
			  const uint8_t *date_ptr);

/*******************************************************************
  create a unix GMT date from a dos date in 32 bit "unix like" format
  these arrive in server zone, with corresponding DST
  ******************************************************************/
time_t srv_pull_dos_date3(struct smbsrv_connection *smb_server,
			  const uint8_t *date_ptr);

/* The following definitions come from ../source4/smb_server/smb/trans2.c  */

int smbsrv_trans_partial_destructor(struct smbsrv_trans_partial *tp);
void smbsrv_reply_trans2(struct smbsrv_request *req);
void smbsrv_reply_trans(struct smbsrv_request *req);
void smbsrv_reply_transs(struct smbsrv_request *req);
void smbsrv_reply_transs2(struct smbsrv_request *req);

/* The following definitions come from ../source4/smb_server/smb/signing.c  */

void smbsrv_sign_packet(struct smbsrv_request *req);
bool smbsrv_setup_signing(struct smbsrv_connection *smb_conn,
			  DATA_BLOB *session_key,
			  DATA_BLOB *response);
bool smbsrv_init_signing(struct smbsrv_connection *smb_conn);
void smbsrv_signing_no_reply(struct smbsrv_request *req);

/**
 * Check a packet supplied by the server.
 * @return false if we had an established signing connection
 *         which had a back checksum, true otherwise
 */
bool smbsrv_signing_check_incoming(struct smbsrv_request *req);
#undef _PRINTF_ATTRIBUTE
#define _PRINTF_ATTRIBUTE(a1, a2)

#endif /* __DEFAULT_SOURCE4_SMB_SERVER_SMB_SMB_PROTO_H__ */

