#ifndef __DEFAULT_SOURCE4_NTVFS_NTVFS_PROTO_H__
#define __DEFAULT_SOURCE4_NTVFS_NTVFS_PROTO_H__

#undef _PRINTF_ATTRIBUTE
#define _PRINTF_ATTRIBUTE(a1, a2) PRINTF_ATTRIBUTE(a1, a2)
/* This file was automatically generated by mkproto.pl. DO NOT EDIT */

/* this file contains prototypes for functions that are private 
 * to this subsystem or library. These functions should not be 
 * used outside this particular subsystem! */


/* The following definitions come from ../source4/ntvfs/ntvfs_base.c  */

NTSTATUS ntvfs_register(const struct ntvfs_ops *ops,
				 const struct ntvfs_critical_sizes *const sizes);
const struct ntvfs_ops *ntvfs_backend_byname(const char *name, enum ntvfs_type type);
const struct ntvfs_critical_sizes *ntvfs_interface_version(void);
bool ntvfs_interface_differs(const struct ntvfs_critical_sizes *const iface);
NTSTATUS ntvfs_init_connection(TALLOC_CTX *mem_ctx, struct share_config *scfg, enum ntvfs_type type,
			       enum protocol_types protocol,
			       uint64_t ntvfs_client_caps,
			       struct tevent_context *ev, struct imessaging_context *msg,
			       struct loadparm_context *lp_ctx,
			       struct server_id server_id, struct ntvfs_context **_ctx);
NTSTATUS ntvfs_init(struct loadparm_context *lp_ctx);

/* The following definitions come from ../source4/ntvfs/ntvfs_generic.c  */

bool is_exe_filename(const char *fname);
NTSTATUS ntvfs_map_open(struct ntvfs_module_context *ntvfs,
				 struct ntvfs_request *req,
				 union smb_open *io);
NTSTATUS ntvfs_map_fsinfo(struct ntvfs_module_context *ntvfs,
			  struct ntvfs_request *req,
			  union smb_fsinfo *fs);
NTSTATUS ntvfs_map_fileinfo(TALLOC_CTX *mem_ctx,
				     union smb_fileinfo *info, 
				     union smb_fileinfo *info2);
NTSTATUS ntvfs_map_qfileinfo(struct ntvfs_module_context *ntvfs,
				      struct ntvfs_request *req,
				      union smb_fileinfo *info);
NTSTATUS ntvfs_map_qpathinfo(struct ntvfs_module_context *ntvfs,
				      struct ntvfs_request *req,
				      union smb_fileinfo *info);
NTSTATUS ntvfs_map_lock(struct ntvfs_module_context *ntvfs,
			struct ntvfs_request *req,
			union smb_lock *lck);
NTSTATUS ntvfs_map_write(struct ntvfs_module_context *ntvfs,
				  struct ntvfs_request *req,
				  union smb_write *wr);
NTSTATUS ntvfs_map_read(struct ntvfs_module_context *ntvfs,
				 struct ntvfs_request *req,
				 union smb_read *rd);
NTSTATUS ntvfs_map_close(struct ntvfs_module_context *ntvfs,
				  struct ntvfs_request *req,
				  union smb_close *cl);
NTSTATUS ntvfs_map_notify(struct ntvfs_module_context *ntvfs,
				   struct ntvfs_request *req,
				   union smb_notify *nt);

/* The following definitions come from ../source4/ntvfs/ntvfs_interface.c  */

NTSTATUS ntvfs_connect(struct ntvfs_request *req, union smb_tcon *tcon);
NTSTATUS ntvfs_disconnect(struct ntvfs_context *ntvfs_ctx);
NTSTATUS ntvfs_async_setup(struct ntvfs_request *req, void *private_data);
NTSTATUS ntvfs_fsinfo(struct ntvfs_request *req, union smb_fsinfo *fs);
NTSTATUS ntvfs_unlink(struct ntvfs_request *req, union smb_unlink *unl);
NTSTATUS ntvfs_chkpath(struct ntvfs_request *req, union smb_chkpath *cp);
NTSTATUS ntvfs_qpathinfo(struct ntvfs_request *req, union smb_fileinfo *st);
NTSTATUS ntvfs_setpathinfo(struct ntvfs_request *req, union smb_setfileinfo *st);
NTSTATUS ntvfs_open(struct ntvfs_request *req, union smb_open *oi);
NTSTATUS ntvfs_mkdir(struct ntvfs_request *req, union smb_mkdir *md);
NTSTATUS ntvfs_rmdir(struct ntvfs_request *req, struct smb_rmdir *rd);
NTSTATUS ntvfs_rename(struct ntvfs_request *req, union smb_rename *ren);
NTSTATUS ntvfs_copy(struct ntvfs_request *req, struct smb_copy *cp);
NTSTATUS ntvfs_search_first(struct ntvfs_request *req, union smb_search_first *io, void *private_data,
				     bool ntvfs_callback(void *private_data, const union smb_search_data *file));
NTSTATUS ntvfs_search_next(struct ntvfs_request *req, union smb_search_next *io, void *private_data,
				    bool ntvfs_callback(void *private_data, const union smb_search_data *file));
NTSTATUS ntvfs_search_close(struct ntvfs_request *req, union smb_search_close *io);
NTSTATUS ntvfs_ioctl(struct ntvfs_request *req, union smb_ioctl *io);
NTSTATUS ntvfs_read(struct ntvfs_request *req, union smb_read *io);
NTSTATUS ntvfs_write(struct ntvfs_request *req, union smb_write *io);
NTSTATUS ntvfs_seek(struct ntvfs_request *req, union smb_seek *io);
NTSTATUS ntvfs_flush(struct ntvfs_request *req,
			      union smb_flush *flush);
NTSTATUS ntvfs_lock(struct ntvfs_request *req, union smb_lock *lck);
NTSTATUS ntvfs_qfileinfo(struct ntvfs_request *req, union smb_fileinfo *info);
NTSTATUS ntvfs_setfileinfo(struct ntvfs_request *req, union smb_setfileinfo *info);
NTSTATUS ntvfs_close(struct ntvfs_request *req, union smb_close *io);
NTSTATUS ntvfs_trans(struct ntvfs_request *req, struct smb_trans2 *trans);
NTSTATUS ntvfs_trans2(struct ntvfs_request *req, struct smb_trans2 *trans2);
NTSTATUS ntvfs_lpq(struct ntvfs_request *req, union smb_lpq *lpq);
NTSTATUS ntvfs_logoff(struct ntvfs_request *req);
NTSTATUS ntvfs_exit(struct ntvfs_request *req);
NTSTATUS ntvfs_notify(struct ntvfs_request *req, union smb_notify *info);
NTSTATUS ntvfs_cancel(struct ntvfs_request *req);
NTSTATUS ntvfs_next_connect(struct ntvfs_module_context *ntvfs, 
				     struct ntvfs_request *req,
				     union smb_tcon *tcon);
NTSTATUS ntvfs_next_disconnect(struct ntvfs_module_context *ntvfs);
NTSTATUS ntvfs_next_async_setup(struct ntvfs_module_context *ntvfs, 
					 struct ntvfs_request *req, 
					 void *private_data);
NTSTATUS ntvfs_next_fsinfo(struct ntvfs_module_context *ntvfs, 
				    struct ntvfs_request *req,
				    union smb_fsinfo *fs);
NTSTATUS ntvfs_next_unlink(struct ntvfs_module_context *ntvfs, 
				    struct ntvfs_request *req,
				    union smb_unlink *unl);
NTSTATUS ntvfs_next_chkpath(struct ntvfs_module_context *ntvfs, 
				     struct ntvfs_request *req,
				     union smb_chkpath *cp);
NTSTATUS ntvfs_next_qpathinfo(struct ntvfs_module_context *ntvfs, 
				       struct ntvfs_request *req,
				       union smb_fileinfo *st);
NTSTATUS ntvfs_next_setpathinfo(struct ntvfs_module_context *ntvfs, 
					 struct ntvfs_request *req,
					 union smb_setfileinfo *st);
NTSTATUS ntvfs_next_mkdir(struct ntvfs_module_context *ntvfs, 
				   struct ntvfs_request *req,
				   union smb_mkdir *md);
NTSTATUS ntvfs_next_rmdir(struct ntvfs_module_context *ntvfs, 
				   struct ntvfs_request *req,
				   struct smb_rmdir *rd);
NTSTATUS ntvfs_next_rename(struct ntvfs_module_context *ntvfs, 
				    struct ntvfs_request *req,
				    union smb_rename *ren);
NTSTATUS ntvfs_next_copy(struct ntvfs_module_context *ntvfs, 
				  struct ntvfs_request *req,
				  struct smb_copy *cp);
NTSTATUS ntvfs_next_open(struct ntvfs_module_context *ntvfs, 
				  struct ntvfs_request *req,
				  union smb_open *oi);
NTSTATUS ntvfs_next_search_first(struct ntvfs_module_context *ntvfs, 
					  struct ntvfs_request *req,
					  union smb_search_first *io, void *private_data,
					  bool (*callback)(void *private_data, const union smb_search_data *file));
NTSTATUS ntvfs_next_search_next(struct ntvfs_module_context *ntvfs, 
					 struct ntvfs_request *req,
					 union smb_search_next *io, void *private_data,
					 bool (*callback)(void *private_data, const union smb_search_data *file));
NTSTATUS ntvfs_next_search_close(struct ntvfs_module_context *ntvfs, 
					  struct ntvfs_request *req,
					  union smb_search_close *io);
NTSTATUS ntvfs_next_ioctl(struct ntvfs_module_context *ntvfs, 
				   struct ntvfs_request *req,
				   union smb_ioctl *io);
NTSTATUS ntvfs_next_read(struct ntvfs_module_context *ntvfs, 
				  struct ntvfs_request *req,
				  union smb_read *io);
NTSTATUS ntvfs_next_write(struct ntvfs_module_context *ntvfs, 
				   struct ntvfs_request *req,
				   union smb_write *io);
NTSTATUS ntvfs_next_seek(struct ntvfs_module_context *ntvfs, 
				  struct ntvfs_request *req,
				  union smb_seek *io);
NTSTATUS ntvfs_next_flush(struct ntvfs_module_context *ntvfs, 
				   struct ntvfs_request *req,
				   union smb_flush *flush);
NTSTATUS ntvfs_next_lock(struct ntvfs_module_context *ntvfs, 
				  struct ntvfs_request *req,
				  union smb_lock *lck);
NTSTATUS ntvfs_next_qfileinfo(struct ntvfs_module_context *ntvfs, 
				       struct ntvfs_request *req,
				       union smb_fileinfo *info);
NTSTATUS ntvfs_next_setfileinfo(struct ntvfs_module_context *ntvfs, 
					 struct ntvfs_request *req,
					 union smb_setfileinfo *info);
NTSTATUS ntvfs_next_close(struct ntvfs_module_context *ntvfs, 
				   struct ntvfs_request *req,
				   union smb_close *io);
NTSTATUS ntvfs_next_trans(struct ntvfs_module_context *ntvfs, 
				   struct ntvfs_request *req,
				   struct smb_trans2 *trans);
NTSTATUS ntvfs_next_trans2(struct ntvfs_module_context *ntvfs, 
				    struct ntvfs_request *req,
				    struct smb_trans2 *trans2);
NTSTATUS ntvfs_next_notify(struct ntvfs_module_context *ntvfs,
				    struct ntvfs_request *req,
				    union smb_notify *info);
NTSTATUS ntvfs_next_cancel(struct ntvfs_module_context *ntvfs, 
				    struct ntvfs_request *req);
NTSTATUS ntvfs_next_lpq(struct ntvfs_module_context *ntvfs, 
				 struct ntvfs_request *req,
				 union smb_lpq *lpq);
NTSTATUS ntvfs_next_logoff(struct ntvfs_module_context *ntvfs, 
				    struct ntvfs_request *req);
NTSTATUS ntvfs_next_exit(struct ntvfs_module_context *ntvfs, 
				  struct ntvfs_request *req);
NTSTATUS ntvfs_set_addresses(struct ntvfs_context *ntvfs,
			     const struct tsocket_address *local_address,
			     const struct tsocket_address *remote_address);
const struct tsocket_address *ntvfs_get_local_address(struct ntvfs_module_context *ntvfs);
const struct tsocket_address *ntvfs_get_remote_address(struct ntvfs_module_context *ntvfs);
NTSTATUS ntvfs_set_oplock_handler(struct ntvfs_context *ntvfs,
					   NTSTATUS (*handler)(void *private_data, struct ntvfs_handle *handle, uint8_t level),
					   void *private_data);
NTSTATUS ntvfs_send_oplock_break(struct ntvfs_module_context *ntvfs,
					  struct ntvfs_handle *handle, uint8_t level);

/* The following definitions come from ../source4/ntvfs/ntvfs_util.c  */

struct ntvfs_request *ntvfs_request_create(struct ntvfs_context *ctx, TALLOC_CTX *mem_ctx,
						    struct auth_session_info *session_info,
						    uint16_t smbpid,
						    struct timeval request_time,
						    void *private_data,
						    void (*send_fn)(struct ntvfs_request *),
						    uint32_t state);
NTSTATUS ntvfs_async_state_push(struct ntvfs_module_context *ntvfs,
					 struct ntvfs_request *req,
					 void *private_data,
					 void (*send_fn)(struct ntvfs_request *));
void ntvfs_async_state_pop(struct ntvfs_request *req);
NTSTATUS ntvfs_handle_new(struct ntvfs_module_context *ntvfs,
				   struct ntvfs_request *req,
				   struct ntvfs_handle **h);
NTSTATUS ntvfs_handle_set_backend_data(struct ntvfs_handle *h,
						struct ntvfs_module_context *ntvfs,
						TALLOC_CTX *private_data);
void *ntvfs_handle_get_backend_data(struct ntvfs_handle *h,
					     struct ntvfs_module_context *ntvfs);
void ntvfs_handle_remove_backend_data(struct ntvfs_handle *h,
					       struct ntvfs_module_context *ntvfs);
struct ntvfs_handle *ntvfs_handle_search_by_wire_key(struct ntvfs_module_context *ntvfs,
							      struct ntvfs_request *req,
							      const DATA_BLOB *key);
DATA_BLOB ntvfs_handle_get_wire_key(struct ntvfs_handle *h, TALLOC_CTX *mem_ctx);
NTSTATUS ntvfs_set_handle_callbacks(struct ntvfs_context *ntvfs,
					     NTSTATUS (*create_new)(void *private_data, struct ntvfs_request *req, struct ntvfs_handle **h),
					     NTSTATUS (*make_valid)(void *private_data, struct ntvfs_handle *h),
					     void (*destroy)(void *private_data, struct ntvfs_handle *h),
					     struct ntvfs_handle *(*search_by_wire_key)(void *private_data, struct ntvfs_request *req, const DATA_BLOB *key),
					     DATA_BLOB (*get_wire_key)(void *private_data, struct ntvfs_handle *handle, TALLOC_CTX *mem_ctx),
					     void *private_data);
#undef _PRINTF_ATTRIBUTE
#define _PRINTF_ATTRIBUTE(a1, a2)

#endif /* __DEFAULT_SOURCE4_NTVFS_NTVFS_PROTO_H__ */

