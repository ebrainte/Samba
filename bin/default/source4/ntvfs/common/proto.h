#ifndef __DEFAULT_SOURCE4_NTVFS_COMMON_PROTO_H__
#define __DEFAULT_SOURCE4_NTVFS_COMMON_PROTO_H__

#undef _PRINTF_ATTRIBUTE
#define _PRINTF_ATTRIBUTE(a1, a2) PRINTF_ATTRIBUTE(a1, a2)
/* This file was automatically generated by mkproto.pl. DO NOT EDIT */

/* this file contains prototypes for functions that are private 
 * to this subsystem or library. These functions should not be 
 * used outside this particular subsystem! */


/* The following definitions come from ../source4/ntvfs/common/init.c  */

NTSTATUS ntvfs_common_init(void);

/* The following definitions come from ../source4/ntvfs/common/brlock.c  */

void brlock_set_ops(const struct brlock_ops *new_ops);
struct brl_context *brlock_init(TALLOC_CTX *mem_ctx, struct server_id server, 
			     struct loadparm_context *lp_ctx,
			     struct imessaging_context *imessaging_ctx);
struct brl_handle *brlock_create_handle(TALLOC_CTX *mem_ctx, struct ntvfs_handle *ntvfs, DATA_BLOB *file_key);
NTSTATUS brlock_lock(struct brl_context *brl,
		  struct brl_handle *brlh,
		  uint32_t smbpid,
		  uint64_t start, uint64_t size, 
		  enum brl_type lock_type,
		  void *notify_ptr);
NTSTATUS brlock_unlock(struct brl_context *brl,
		    struct brl_handle *brlh, 
		    uint32_t smbpid,
		    uint64_t start, uint64_t size);
NTSTATUS brlock_remove_pending(struct brl_context *brl,
			    struct brl_handle *brlh, 
			    void *notify_ptr);
NTSTATUS brlock_locktest(struct brl_context *brl,
		      struct brl_handle *brlh,
		      uint32_t smbpid, 
		      uint64_t start, uint64_t size, 
		      enum brl_type lock_type);
NTSTATUS brlock_close(struct brl_context *brl,
		   struct brl_handle *brlh);
NTSTATUS brlock_count(struct brl_context *brl,
		   struct brl_handle *brlh,
		   int *count);

/* The following definitions come from ../source4/ntvfs/common/brlock_tdb.c  */

void brl_tdb_init_ops(void);

/* The following definitions come from ../source4/ntvfs/common/opendb.c  */

void odb_set_ops(const struct opendb_ops *new_ops);
struct odb_context *odb_init(TALLOC_CTX *mem_ctx, 
				      struct ntvfs_context *ntvfs_ctx);
struct odb_lock *odb_lock(TALLOC_CTX *mem_ctx,
				   struct odb_context *odb, DATA_BLOB *file_key);
DATA_BLOB odb_get_key(TALLOC_CTX *mem_ctx, struct odb_lock *lck);
NTSTATUS odb_open_file(struct odb_lock *lck,
				void *file_handle, const char *path,
				int *fd, NTTIME open_write_time,
				bool allow_level_II_oplock,
				uint32_t oplock_level, uint32_t *oplock_granted);
NTSTATUS odb_open_file_pending(struct odb_lock *lck, void *private_data);
NTSTATUS odb_close_file(struct odb_lock *lck, void *file_handle,
				 const char **delete_path);
NTSTATUS odb_remove_pending(struct odb_lock *lck, void *private_data);
NTSTATUS odb_rename(struct odb_lock *lck, const char *path);
NTSTATUS odb_get_path(struct odb_lock *lck, const char **path);
NTSTATUS odb_set_delete_on_close(struct odb_lock *lck, bool del_on_close);
NTSTATUS odb_set_write_time(struct odb_lock *lck,
			    NTTIME write_time, bool force);
NTSTATUS odb_get_file_infos(struct odb_context *odb, DATA_BLOB *key,
			    bool *del_on_close, NTTIME *write_time);
NTSTATUS odb_can_open(struct odb_lock *lck,
			       uint32_t stream_id, uint32_t share_access,
			       uint32_t access_mask, bool delete_on_close,
			       uint32_t open_disposition, bool break_to_none);
NTSTATUS odb_update_oplock(struct odb_lock *lck, void *file_handle,
				    uint32_t oplock_level);
NTSTATUS odb_break_oplocks(struct odb_lock *lck);

/* The following definitions come from ../source4/ntvfs/common/opendb_tdb.c  */

void odb_tdb_init_ops(void);

/* The following definitions come from ../source4/ntvfs/common/notify.c  */

struct notify_context *notify_init(TALLOC_CTX *mem_ctx, struct server_id server, 
				   struct imessaging_context *imessaging_ctx,
				   struct loadparm_context *lp_ctx,
				   struct tevent_context *ev,
				   struct share_config *scfg);
NTSTATUS notify_add(struct notify_context *notify, struct notify_entry *e0,
		    void (*callback)(void *, const struct notify_event *), 
		    void *private_data);
NTSTATUS notify_remove(struct notify_context *notify, void *private_data);
void notify_trigger(struct notify_context *notify,
		    uint32_t action, uint32_t filter, const char *path);
#undef _PRINTF_ATTRIBUTE
#define _PRINTF_ATTRIBUTE(a1, a2)

#endif /* __DEFAULT_SOURCE4_NTVFS_COMMON_PROTO_H__ */

